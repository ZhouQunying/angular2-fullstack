{
  // http://eslint.org/docs/rules/

  "ecmaFeatures": {
    "binaryLiterals": false,                    // enable binary literals
    "blockBindings": false,                     // enable let and const (aka block bindings)
    "defaultParams": false,                     // enable default function parameters
    "forOf": false,                             // enable for-of loops
    "generators": false,                        // enable generators
    "objectLiteralComputedProperties": false,   // enable computed object literal property names
    "objectLiteralDuplicateProperties": false,  // enable duplicate object literal properties in strict mode
    "objectLiteralShorthandMethods": false,     // enable object literal shorthand methods
    "objectLiteralShorthandProperties": false,  // enable object literal shorthand properties
    "octalLiterals": false,                     // enable octal literals
    "regexUFlag": false,                        // enable the regular expression u flag
    "regexYFlag": false,                        // enable the regular expression y flag
    "templateStrings": false,                   // enable template strings
    "unicodeCodePointEscapes": false,           // enable code point escapes
    "jsx": false                                // enable JSX
  },

  "env": {
    "browser": false,     // browser global variables.
    "node": false,        // Node.js global variables and Node.js-specific rules.
    "amd": false,         // defines require() and define() as global variables as per the amd spec.
    "mocha": false,       // adds all of the Mocha testing global variables.
    "jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs": false,   // phantomjs global variables.
    "jquery": false,      // jquery global variables.
    "prototypejs": false, // prototypejs global variables.
    "shelljs": false,     // shelljs global variables.
  },

  "globals": {
    // e.g. "angular": true
  },

  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "extends": [
    "eslint-config-airbnb-es5"
  ],

  // "rules": {
  //   ////////// Possible Errors //////////

  //   "no-comma-dangle": 0,         // disallow trailing commas in object literals
  //   "no-cond-assign": 0,          // disallow assignment in conditional expressions
  //   "no-console": 0,              // disallow use of console (off by default in the node environment)
  //   "no-constant-condition": 0,   // disallow use of constant expressions in conditions
  //   "no-control-regex": 0,        // disallow control characters in regular expressions
  //   "no-debugger": 0,             // disallow use of debugger
  //   "no-dupe-keys": 0,            // disallow duplicate keys when creating object literals
  //   "no-empty": 0,                // disallow empty statements
  //   "no-empty-class": 0,          // disallow the use of empty character classes in regular expressions
  //   "no-ex-assign": 0,            // disallow assigning to the exception in a catch block
  //   "no-extra-boolean-cast": 0,   // disallow double-negation boolean casts in a boolean context
  //   "no-extra-parens": 0,         // disallow unnecessary parentheses (off by default)
  //   "no-extra-semi": 0,           // disallow unnecessary semicolons
  //   "no-func-assign": 0,          // disallow overwriting functions written as function declarations
  //   "no-inner-declarations": 0,   // disallow function or variable declarations in nested blocks
  //   "no-invalid-regexp": 0,       // disallow invalid regular expression strings in the RegExp constructor
  //   "no-irregular-whitespace": 0, // disallow irregular whitespace outside of strings and comments
  //   "no-negated-in-lhs": 0,       // disallow negation of the left operand of an in expression
  //   "no-obj-calls": 0,            // disallow the use of object properties of the global object (Math and JSON) as functions
  //   "no-regex-spaces": 0,         // disallow multiple spaces in a regular expression literal
  //   "no-reserved-keys": 0,        // disallow reserved words being used as object literal keys (off by default)
  //   "no-sparse-arrays": 0,        // disallow sparse arrays
  //   "no-unreachable": 0,          // disallow unreachable statements after a return, throw, continue, or break statement
  //   "use-isnan": 0,               // disallow comparisons with the value NaN
  //   "valid-jsdoc": 0,             // Ensure JSDoc comments are valid (off by default)
  //   "valid-typeof": 0,            // Ensure that the results of typeof are compared against a valid string


  //   ////////// Best Practices //////////

  //   "block-scoped-var": 0,      // treat var statements as if they were block scoped (off by default)
  //   "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program (off by default)
  //   "consistent-return": 0,     // require return statements to either always or never specify values
  //   "curly": 0,                 // specify curly brace conventions for all control statements
  //   "default-case": 0,          // require default case in switch statements (off by default)
  //   "dot-notation": 0,          // encourages use of dot notation whenever possible
  //   "eqeqeq": 0,                // require the use of === and !==
  //   "guard-for-in": 0,          // make sure for-in loops have an if statement (off by default)
  //   "no-alert": 0,              // disallow the use of alert, confirm, and prompt
  //   "no-caller": 0,             // disallow use of arguments.caller or arguments.callee
  //   "no-div-regex": 0,          // disallow division operators explicitly at beginning of regular expression (off by default)
  //   "no-else-return": 0,        // disallow else after a return in an if (off by default)
  //   "no-empty-label": 0,        // disallow use of labels for anything other then loops and switches
  //   "no-eq-null": 0,            // disallow comparisons to null without a type-checking operator (off by default)
  //   "no-eval": 0,               // disallow use of eval()
  //   "no-extend-native": 0,      // disallow adding to native types
  //   "no-extra-bind": 0,         // disallow unnecessary function binding
  //   "no-fallthrough": 0,        // disallow fallthrough of case statements
  //   "no-floating-decimal": 0,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
  //   "no-implied-eval": 0,       // disallow use of eval()-like methods
  //   "no-iterator": 0,           // disallow usage of __iterator__ property
  //   "no-labels": 0,             // disallow use of labeled statements
  //   "no-lone-blocks": 0,        // disallow unnecessary nested blocks
  //   "no-loop-func": 0,          // disallow creation of functions within loops
  //   "no-multi-spaces": 0,       // disallow use of multiple spaces
  //   "no-multi-str": 0,          // disallow use of multiline strings
  //   "no-native-reassign": 0,    // disallow reassignments of native objects
  //   "no-new": 0,                // disallow use of new operator when not part of the assignment or comparison
  //   "no-new-func": 0,           // disallow use of new operator for Function object
  //   "no-new-wrappers": 0,       // disallows creating new instances of String, Number, and Boolean
  //   "no-octal": 0,              // disallow use of octal literals
  //   "no-octal-escape": 0,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  //   "no-process-env": 0,        // disallow use of process.env (off by default)
  //   "no-proto": 0,              // disallow usage of __proto__ property
  //   "no-redeclare": 0,          // disallow declaring the same variable more then once
  //   "no-return-assign": 0,      // disallow use of assignment in return statement
  //   "no-script-url": 0,         // disallow use of javascript: urls.
  //   "no-self-compare": 0,       // disallow comparisons where both sides are exactly the same (off by default)
  //   "no-sequences": 0,          // disallow use of comma operator
  //   "no-unused-expressions": 0, // disallow usage of expressions in statement position
  //   "no-void": 0,               // disallow use of void operator (off by default)
  //   "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
  //   "no-with": 0,               // disallow use of the with statement
  //   "radix": 0,                 // require use of the second argument for parseInt() (off by default)
  //   "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
  //   "wrap-iife": 0,             // require immediate function invocation to be wrapped in parentheses (off by default)
  //   "yoda": 0,                  // require or disallow Yoda conditions


  //   ////////// Strict Mode //////////

  //   "global-strict": 0,   // (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
  //   "no-extra-strict": 0, // (deprecated) disallow unnecessary use of "use strict"; when already in strict mode
  //   "strict": 0,          // controls location of Use Strict Directives


  //   ////////// Variables //////////

  //   "no-catch-shadow": 0,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
  //   "no-delete-var": 0,               // disallow deletion of variables
  //   "no-label-var": 0,                // disallow labels that share a name with a variable
  //   "no-shadow": 0,                   // disallow declaration of variables already declared in the outer scope
  //   "no-shadow-restricted-names": 0,  // disallow shadowing of names such as arguments
  //   "no-undef": 0,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
  //   "no-undef-init": 0,               // disallow use of undefined when initializing variables
  //   "no-undefined": 0,                // disallow use of undefined variable (off by default)
  //   "no-unused-vars": 0,              // disallow declaration of variables that are not used in the code
  //   "no-use-before-define": 0,        // disallow use of variables before they are defined


  //   ////////// Node.js //////////

  //   "handle-callback-err": 0,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
  //   "no-mixed-requires": 0,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
  //   "no-new-require": 0,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
  //   "no-path-concat": 0,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
  //   "no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
  //   "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
  //   "no-sync": 0,               // disallow use of synchronous methods (off by default)


  //   ////////// Stylistic Issues //////////

  //   "brace-style": 0,               // enforce one true brace style (off by default)
  //   "camelcase": 0,                 // require camel case names
  //   "comma-spacing": 0,             // enforce spacing before and after comma
  //   "comma-style": 0,               // enforce one true comma style (off by default)
  //   "consistent-this": 0,           // enforces consistent naming when capturing the current execution context (off by default)
  //   "eol-last": 0,                  // enforce newline at the end of file, with no multiple empty lines
  //   "func-names": 0,                // require function expressions to have a name (off by default)
  //   "func-style": 0,                // enforces use of function declarations or expressions (off by default)
  //   "key-spacing": 0,               // enforces spacing between keys and values in object literal properties
  //   "max-nested-callbacks": 0,      // specify the maximum depth callbacks can be nested (off by default)
  //   "new-cap": 0,                   // require a capital letter for constructors
  //   "new-parens": 0,                // disallow the omission of parentheses when invoking a constructor with no arguments
  //   "no-array-constructor": 0,      // disallow use of the Array constructor
  //   "no-inline-comments": 0,        // disallow comments inline after code (off by default)
  //   "no-lonely-if": 0,              // disallow if as the only statement in an else block (off by default)
  //   "no-mixed-spaces-and-tabs": 0,  // disallow mixed spaces and tabs for indentation
  //   "no-multiple-empty-lines": 0,   // disallow multiple empty lines (off by default)
  //   "no-nested-ternary": 0,         // disallow nested ternary expressions (off by default)
  //   "no-new-object": 0,             // disallow use of the Object constructor
  //   "no-space-before-semi": 0,      // disallow space before semicolon
  //   "no-spaced-func": 0,            // disallow space between function identifier and application
  //   "no-ternary": 0,                // disallow the use of ternary operators (off by default)
  //   "no-trailing-spaces": 0,        // disallow trailing whitespace at the end of lines
  //   "no-underscore-dangle": 0,      // disallow dangling underscores in identifiers
  //   "no-wrap-func": 0,              // disallow wrapping of non-IIFE statements in parens
  //   "one-var": 0,                   // allow just one var statement per function (off by default)
  //   "operator-assignment": 0,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
  //   "padded-blocks": 0,             // enforce padding within blocks (off by default)
  //   "quote-props": 0,               // require quotes around object literal property names (off by default)
  //   "quotes": 0,                    // specify whether double or single quotes should be used
  //   "semi": 0,                      // require or disallow use of semicolons instead of ASI
  //   "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
  //   "space-after-function-name": 0, // require a space after function names (off by default)
  //   "space-after-keywords": 0,      // require a space after certain keywords (off by default)
  //   "space-before-blocks": 0,       // require or disallow space before blocks (off by default)
  //   "space-in-brackets": 0,         // require or disallow spaces inside brackets (off by default)
  //   "space-in-parens": 0,           // require or disallow spaces inside parentheses (off by default)
  //   "space-infix-ops": 0,           // require spaces around operators
  //   "space-return-throw-case": 0,   // require a space after return, throw, and case
  //   "space-unary-ops": 0,           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
  //   "spaced-line-comment": 0,       // require or disallow a space immediately following the // in a line comment (off by default)
  //   "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)


  //   ////////// ECMAScript 6 //////////

  //   "no-var": 0,          // require let or const instead of var (off by default)
  //   "generator-star": 0,  // enforce the position of the * in generator functions (off by default)


  //   ////////// Legacy //////////

  //   "max-depth": 0,       // specify the maximum depth that blocks can be nested (off by default)
  //   "max-len": 0,         // specify the maximum length of a line in your program (off by default)
  //   "max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
  //   "max-statements": 0,  // specify the maximum number of statement allowed in a function (off by default)
  //   "no-bitwise": 0,      // disallow use of bitwise operators (off by default)
  //   "no-plusplus": 0,      // disallow use of unary operators, ++ and -- (off by default)

  //   ////////// By Richard //////////
  //   "comma-dangle": [0, {
  //     "arrays": "never",
  //     "objects": "never",
  //     "imports": "never",
  //     "exports": "never"
  //   }],
  //   "no-unused-vars": [2, {args: "none"}]
  // }

  //
  "rules": {
    // The rules below are listed in the order they appear on the eslint
    // rules page. All rules are listed to make it easier to keep in sync
    // as new ESLint rules are added.
    // http://eslint.org/docs/rules/
    // - Rules in the `eslint:recommended` ruleset that aren't specifically
    //   mentioned by the google styleguide are listed but commented out (so
    //   they don't override a base ruleset).
    // - Rules that are recommended but contradict the Google styleguide
    //   are explicitely set to the Google styleguide value.

    // Possible Errors
    // http://eslint.org/docs/rules/#possible-errors
    // ---------------------------------------------
    'no-cond-assign': 0, // eslint:recommended
    // 'no-console': 2, // eslint:recommended
    // 'no-constant-condition': 2, // eslint:recommended
    // 'no-control-regex': 2, // eslint:recommended
    // 'no-debugger': 2, // eslint:recommended
    // 'no-dupe-args': 2, // eslint:recommended
    // 'no-dupe-keys': 2, // eslint:recommended
    // 'no-duplicate-case': 2, // eslint:recommended
    // 'no-empty-character-class': 2, // eslint:recommended
    // 'no-empty': 2, // eslint:recommended
    // 'no-ex-assign': 2, // eslint:recommended
    // 'no-extra-boolean-cast': 2, // eslint:recommended
    // 'no-extra-parens': 0,
    // 'no-extra-semi': 2, // eslint:recommended
    // 'no-func-assign': 2, // eslint:recommended
    // 'no-inner-declarations': 2, // eslint:recommended
    // 'no-invalid-regexp': 2, // eslint:recommended
    'no-irregular-whitespace': 2, // eslint:recommended
    // 'no-obj-calls': 2, // eslint:recommended
    // 'no-prototype-builtins': 0,
    // 'no-regex-spaces': 2, // eslint:recommended
    // 'no-sparse-arrays': 2, // eslint:recommended
    // 'no-template-curly-in-string': 0,
    'no-unexpected-multiline': 2, // eslint:recommended
    // 'no-unreachable': 2, // eslint:recommended
    // 'no-unsafe-finally': 2, // eslint:recommended
    // 'no-unsafe-negation': 0,
    // 'use-isnan': 2 // eslint:recommended
    'valid-jsdoc': [2, {
      requireParamDescription: false,
      requireReturnDescription: false,
      requireReturn: false,
      prefer: {returns: 'return'},
    }],
    // 'valid-typeof': 2 // eslint:recommended


    // Best Practices
    // http://eslint.org/docs/rules/#best-practices
    // --------------------------------------------

    // 'accessor-pairs': 0,
    // 'array-callback-return': 0,
    // 'block-scoped-var': 0,
    // 'class-methods-use-this': 0,
    // 'complexity': 0,
    // 'consistent-return': 0
    // 'curly': 0, // TODO(philipwalton): add an option to enforce braces with
                   // the exception of simple, single-line if statements.
    // 'default-case': 0,
    // 'dot-location': 0,
    // 'dot-notation': 0,
    // 'eqeqeq': 0,
    'guard-for-in': 2,
    // 'no-alert': 0,
    'no-caller': 2,
    // 'no-case-declarations': 2, // eslint:recommended
    // 'no-div-regex': 0,
    // 'no-else-return': 0,
    // 'no-empty-function': 0,
    // 'no-empty-pattern': 2, // eslint:recommended
    // 'no-eq-null': 0,
    // 'no-eval': 0,
    'no-extend-native': 2,
    'no-extra-bind': 2,
    // 'no-extra-label': 0,
    // 'no-fallthrough': 2, // eslint:recommended
    // 'no-floating-decimal': 0,
    // 'no-global-assign': 0,
    // 'no-implicit-coercion': 0,
    // 'no-implicit-globals': 0,
    // 'no-implied-eval': 0,
    'no-invalid-this': 2,
    // 'no-iterator': 0,
    // 'no-labels': 0,
    // 'no-lone-blocks': 0,
    // 'no-loop-func': 0,
    // 'no-magic-numbers': 0,
    'no-multi-spaces': 2,
    'no-multi-str': 2,
    // 'no-new-func': 0,
    'no-new-wrappers': 2,
    // 'no-new': 0,
    // 'no-octal-escape': 0,
    // 'no-octal': 2, // eslint:recommended
    // 'no-param-reassign': 0,
    // 'no-proto': 0,
    // 'no-redeclare': 2, // eslint:recommended
    // 'no-return-assign': 0,
    // 'no-script-url': 0,
    // 'no-self-assign': 2, // eslint:recommended
    // 'no-self-compare': 0,
    // 'no-sequences': 0,
    'no-throw-literal': 2, // eslint:recommended
    // 'no-unmodified-loop-condition': 0,
    // 'no-unused-expressions': 0,
    // 'no-unused-labels': 2, // eslint:recommended
    // 'no-useless-call': 0,
    // 'no-useless-concat': 0,
    // 'no-useless-escape': 0,
    // 'no-void': 0,
    // 'no-warning-comments': 0,
    'no-with': 2,
    // 'radix': 0,
    // 'vars-on-top': 0,
    // 'wrap-iife': 0,
    // 'yoda': 0,

    // Strict Mode
    // http://eslint.org/docs/rules/#strict-mode
    // -----------------------------------------
    // 'script': 0,

    // Variables
    // http://eslint.org/docs/rules/#variables
    // ---------------------------------------
    // 'init-declarations': 0,
    // 'no-catch-shadow': 0,
    // 'no-delete-var': 2, // eslint:recommended
    // 'no-label-var': 0,
    // 'no-restricted-globals': 0,
    // 'no-shadow-restricted-names': 0,
    // 'no-shadow': 0,
    // 'no-undef-init': 0,
    // 'no-undef': 2, // eslint:recommended
    // 'no-undefined': 0,
    'no-unused-vars': [2, {args: 'none'}], // eslint:recommended
    // 'no-use-before-define': 0,

    // Node.js and CommonJS
    // http://eslint.org/docs/rules/#nodejs-and-commonjs
    // -------------------------------------------------
    // 'callback-return': 0,
    // 'global-require': 0,
    // 'handle-callback-err': 0,
    // 'no-mixed-requires': 0,
    // 'no-new-require': 0,
    // 'no-path-concat': 0,
    // 'no-process-env': 0,
    // 'no-process-exit': 0,
    // 'no-restricted-modules': 0,
    // 'no-restricted-properties': 0,
    // 'no-sync': 0,

    // Stylistic Issues
    // http://eslint.org/docs/rules/#stylistic-issues
    // ----------------------------------------------
    'array-bracket-spacing': [2, 'never'],
    // 'block-spacing': 0,
    'brace-style': 2,
    'camelcase': [2, {properties: 'never'}],
    'comma-dangle': [2, 'always-multiline'],
    'comma-spacing': 2,
    'comma-style': 2,
    'computed-property-spacing': 2,
    // 'consistent-this': 0,
    'eol-last': 2,
    'func-call-spacing': 2,
    // 'func-name-matching': 0,
    // 'func-names': 0,
    // 'func-style': 0,
    // 'id-blacklist': 0,
    // 'id-length': 0,
    // 'id-match': 0,
    // 'indent': 0, // TODO(philipwalton): this rule isn't compatible with
                    // Google's 4-space indent for line continuations.
    // 'jsx-quotes': 0,
    'key-spacing': 2,
    'keyword-spacing': 0,
    // 'line-comment-position': 0,
    'linebreak-style': 2,
    // 'lines-around-comment': 0,
    // 'lines-around-directive': 0,
    // 'max-depth': 0,
    'max-len': [2, {
      code: 120,
      tabWidth: 2,
      ignoreUrls: true,
      ignorePattern: '^goog\.(module|require)',
    }],
    // 'max-lines': 0,
    // 'max-nested-callbacks': 0,
    // 'max-params': 0,
    // 'max-statements-per-line': 0,
    // 'max-statements': 0,
    // 'multiline-ternary': 0, // TODO(philipwalton): add a rule to enforce the
                               // operator appearing at the end of the line.
    'new-cap': 2,
    // 'new-parens': 0,
    // 'newline-after-var': 0,
    // 'newline-before-return': 0,
    // 'newline-per-chained-call': 0,
    'no-array-constructor': 2,
    // 'no-bitwise': 0,
    // 'no-continue': 0,
    // 'no-inline-comments': 0,
    // 'no-lonely-if': 0,
    // 'no-mixed-operators': 0,
    'no-mixed-spaces-and-tabs': 2, // eslint:recommended
    'no-multiple-empty-lines': [2, {max: 2}],
    // 'no-negated-condition': 0,
    // 'no-nested-ternary': 0,
    'no-new-object': 2,
    // 'no-plusplus': 0,
    // 'no-restricted-syntax': 0,
    // 'no-tabs': 0,
    // 'no-ternary': 0,
    'no-trailing-spaces': 2,
    // 'no-underscore-dangle': 0,
    // 'no-unneeded-ternary': 0,
    // 'no-whitespace-before-property': 0,
    // 'object-curly-newline': 0,
    'object-curly-spacing': 2,
    // 'object-property-newline': 0,
    // 'one-var-declaration-per-line': 0,
    'one-var': [2, {
      var: 'never',
      let: 'never',
      const: 'never',
    }],
    // 'operator-assignment': 0,
    // 'operator-linebreak': 0,
    'padded-blocks': [2, 'never'],
    'quote-props': [2, 'consistent'],
    'quotes': [2, 'single', {allowTemplateLiterals: true}],
    'require-jsdoc': [2, {
      require: {
        FunctionDeclaration: true,
        MethodDefinition: true,
        ClassDeclaration: true,
      },
    }],
    'semi-spacing': 2,
    'semi': 2,
    // 'sort-keys': 0,
    // 'sort-vars': 0,
    'space-before-blocks': 2,
    'space-before-function-paren': [2, 'never'],
    // 'space-in-parens': 0,
    // 'space-infix-ops': 0,
    // 'space-unary-ops': 0,
    'spaced-comment': [2, 'always'],
    // 'unicode-bom': 0,
    // 'wrap-regex': 0,

    // ECMAScript 6
    // http://eslint.org/docs/rules/#ecmascript-6
    // ------------------------------------------
    // 'arrow-body-style': 0,
    'arrow-parens': [2, 'always'], // TODO(philipwalton): technically arrow
                                   // parens are optional but recommended.
                                   // ESLint doesn't support a *consistent*
                                   // setting so "always" is used.
    // 'arrow-spacing': 0,
    'constructor-super': 2, // eslint:recommended
    'generator-star-spacing': [2, 'after'],
    // 'no-class-assign': 0,
    // 'no-confusing-arrow': 0,
    // 'no-const-assign': 0, // eslint:recommended
    // 'no-dupe-class-members': 0, // eslint:recommended
    // 'no-duplicate-imports': 0,
    'no-new-symbol': 2, // eslint:recommended
    // 'no-restricted-imports': 0,
    'no-this-before-super': 2,  // eslint:recommended
    // 'no-useless-computed-key': 0,
    // 'no-useless-constructor': 0,
    // 'no-useless-rename': 0,
    'no-var': 2,
    // 'object-shorthand': 0,
    // 'prefer-arrow-callback': 0,
    // 'prefer-const': 0,
    // 'prefer-numeric-literals': 0,
    // 'prefer-reflect': 0,
    'prefer-rest-params': 2,
    'prefer-spread': 2,
    // 'prefer-template': 0,
    // 'require-yield': 2, // eslint:recommended
    'rest-spread-spacing': 2,
    // 'sort-imports': 0,
    // 'symbol-description': 0,
    // 'template-curly-spacing': 0,
    'yield-star-spacing': [2, 'after'],
  },
}
